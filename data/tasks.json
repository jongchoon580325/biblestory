{
  "tasks": [
    {
      "id": "4dbcdd16-909e-40ec-ac8f-216623f4f3db",
      "name": "파일명 검증 및 장 번호 자동 추출 로직 구현",
      "description": "FileUpload.tsx에 파일명 패턴 검증 및 장 번호 자동 추출 로직을 구현. 정규식 패턴 /[0-9]{2,3}-([a-zA-Z0-9]+)-([0-9]+)\\.html/을 사용하여 파일명에서 장 번호를 추출하고, 1-150 범위 검증을 수행. 기존 장 번호 입력 필드를 제거하고 자동화된 매핑 시스템으로 대체.",
      "notes": "기존 toSlug, getTestamentFolder 함수 재사용. 정규식 패턴은 PRD 문서의 3.4 섹션 참조. 장 번호 범위는 1-150으로 제한.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-07-18T19:09:53.312Z",
      "updatedAt": "2025-07-18T19:09:53.312Z",
      "relatedFiles": [
        {
          "path": "src/components/features/FileUpload.tsx",
          "type": "TO_MODIFY",
          "description": "파일명 검증 및 장 번호 자동 추출 로직 추가",
          "lineStart": 1,
          "lineEnd": 238
        }
      ],
      "implementationGuide": "1. extractChapterFromFileName 함수 구현: 파일명에서 장 번호 추출 로직\\n2. validateFileName 함수 구현: 파일명 패턴 검증 및 오류 메시지 반환\\n3. 기존 chapter 상태 및 입력 필드 제거\\n4. 파일 선택 시 자동 검증 로직 추가\\n5. 검증 실패 파일에 대한 오류 처리 구현",
      "verificationCriteria": "- 파일명 패턴 검증이 정확히 동작하는지 확인\\n- 장 번호 자동 추출이 올바르게 작동하는지 확인\\n- 기존 장 번호 입력 필드가 제거되었는지 확인\\n- 검증 실패 파일에 대한 적절한 오류 메시지가 표시되는지 확인",
      "analysisResult": "성경 자료 다중 파일 업로드 시스템 구현을 위한 TODO 리스트. 기존 FileUpload.tsx 컴포넌트 개선을 우선으로 하고, 파일명 패턴에서 장 번호 자동 추출, 다중 파일 일괄 업로드, 진행률 표시, Supabase DB 구조 개선을 포함한 완전한 시스템 구축. 사용자 경험 향상과 성능 최적화를 목표로 함."
    },
    {
      "id": "e753777b-dd81-419e-be9b-0e1222e115a7",
      "name": "파일 검증 테이블 UI 구현",
      "description": "기존 단순 파일 리스트를 테이블 형태로 개선하여 각 파일의 검증 결과, 크기, 장 번호, 상태를 시각적으로 표시. 파일별 상태 아이콘(✅❌⚠️) 시스템을 구현하고, 부적합 파일 클릭 시 구체적인 오류 메시지를 표시하는 기능을 추가.",
      "notes": "기존 드래그앤드롭 영역은 유지. 테이블 디자인은 기존 다크모드 스타일과 일치하도록 구현. 파일 크기는 KB 단위로 표시.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "4dbcdd16-909e-40ec-ac8f-216623f4f3db"
        }
      ],
      "createdAt": "2025-07-18T19:09:53.312Z",
      "updatedAt": "2025-07-18T19:09:53.312Z",
      "relatedFiles": [
        {
          "path": "src/components/features/FileUpload.tsx",
          "type": "TO_MODIFY",
          "description": "파일 검증 테이블 UI 구현",
          "lineStart": 180,
          "lineEnd": 238
        }
      ],
      "implementationGuide": "1. FileValidationTable 컴포넌트 구현: 파일 상태 테이블 UI\\n2. 파일별 상태 아이콘 시스템 구현 (적합/부적합/경고)\\n3. 파일 크기 표시 및 포맷팅 로직 추가\\n4. 파일 제거 기능 구현 (개별 파일 삭제)\\n5. 오류 메시지 툴팁 또는 모달 구현\\n6. 기존 단순 파일 리스트를 테이블로 교체",
      "verificationCriteria": "- 파일 검증 테이블이 올바르게 렌더링되는지 확인\\n- 각 파일의 상태 아이콘이 정확히 표시되는지 확인\\n- 파일 크기와 장 번호가 올바르게 표시되는지 확인\\n- 파일 제거 기능이 정상 동작하는지 확인\\n- 오류 메시지가 적절히 표시되는지 확인",
      "analysisResult": "성경 자료 다중 파일 업로드 시스템 구현을 위한 TODO 리스트. 기존 FileUpload.tsx 컴포넌트 개선을 우선으로 하고, 파일명 패턴에서 장 번호 자동 추출, 다중 파일 일괄 업로드, 진행률 표시, Supabase DB 구조 개선을 포함한 완전한 시스템 구축. 사용자 경험 향상과 성능 최적화를 목표로 함."
    },
    {
      "id": "fd0de9af-6b63-4132-9929-b8f43b768afe",
      "name": "진행률 표시 컴포넌트 구현",
      "description": "업로드 진행 상황을 실시간으로 표시하는 UploadProgress 컴포넌트를 구현. 진행률 바, 완료된 파일 수, 전체 파일 수를 표시하고, 업로드 중일 때와 준비 완료 상태를 구분하여 표시하는 기능을 추가.",
      "notes": "기존 gradient 스타일과 일치하도록 구현. 진행률 바는 0.3초 부드러운 전환 효과 적용. 업로드 준비 완료 상태와 진행 중 상태를 명확히 구분.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "e753777b-dd81-419e-be9b-0e1222e115a7"
        }
      ],
      "createdAt": "2025-07-18T19:09:53.312Z",
      "updatedAt": "2025-07-18T19:09:53.312Z",
      "relatedFiles": [
        {
          "path": "src/components/features/FileUpload.tsx",
          "type": "TO_MODIFY",
          "description": "진행률 표시 컴포넌트 통합",
          "lineStart": 180,
          "lineEnd": 238
        }
      ],
      "implementationGuide": "1. UploadProgress 컴포넌트 구현: 진행률 바 및 상태 표시\\n2. 진행률 계산 로직 구현 (current/total * 100)\\n3. 업로드 상태에 따른 UI 변경 로직 구현\\n4. 애니메이션 효과 추가 (진행률 바 전환)\\n5. FileUpload.tsx에 진행률 컴포넌트 통합\\n6. 업로드 상태 관리 로직 개선",
      "verificationCriteria": "- 진행률 바가 올바르게 표시되는지 확인\\n- 진행률 계산이 정확한지 확인\\n- 업로드 상태에 따른 UI 변경이 정상 동작하는지 확인\\n- 애니메이션 효과가 부드럽게 작동하는지 확인\\n- 완료된 파일 수와 전체 파일 수가 정확히 표시되는지 확인",
      "analysisResult": "성경 자료 다중 파일 업로드 시스템 구현을 위한 TODO 리스트. 기존 FileUpload.tsx 컴포넌트 개선을 우선으로 하고, 파일명 패턴에서 장 번호 자동 추출, 다중 파일 일괄 업로드, 진행률 표시, Supabase DB 구조 개선을 포함한 완전한 시스템 구축. 사용자 경험 향상과 성능 최적화를 목표로 함."
    },
    {
      "id": "0cc14fa3-d112-4871-9b51-7e5b2e143db8",
      "name": "일괄 업로드 로직 구현",
      "description": "기존 개별 파일 업로드 로직을 일괄 처리 방식으로 개선. Storage 병렬 업로드와 DB 일괄 삽입을 구현하고, 에러 처리 및 롤백 로직을 강화. 파일별 개별 장 번호 추출 및 메타데이터 생성을 포함한 완전한 다중 파일 업로드 시스템을 구축.",
      "notes": "기존 Supabase 클라이언트 및 업로드 로직 재사용. 병렬 업로드는 최대 5개 동시 처리로 제한. DB 삽입 실패 시 Storage 파일 정리 로직 구현.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "fd0de9af-6b63-4132-9929-b8f43b768afe"
        }
      ],
      "createdAt": "2025-07-18T19:09:53.312Z",
      "updatedAt": "2025-07-18T19:09:53.312Z",
      "relatedFiles": [
        {
          "path": "src/components/features/FileUpload.tsx",
          "type": "TO_MODIFY",
          "description": "일괄 업로드 로직 구현",
          "lineStart": 109,
          "lineEnd": 178
        }
      ],
      "implementationGuide": "1. createMaterialMetadata 함수 구현: 파일별 메타데이터 생성\\n2. Storage 병렬 업로드 로직 구현 (Promise.allSettled 사용)\\n3. DB 일괄 삽입 로직 구현 (배치 처리)\\n4. 에러 처리 및 롤백 로직 강화\\n5. 업로드 결과 수집 및 상태 업데이트 로직 개선\\n6. 기존 handleUpload 함수를 일괄 처리 방식으로 교체",
      "verificationCriteria": "- 다중 파일 일괄 업로드가 정상 동작하는지 확인\\n- 각 파일의 장 번호가 올바르게 추출되어 저장되는지 확인\\n- 병렬 업로드 성능이 개선되었는지 확인\\n- 에러 처리 및 롤백이 정상 동작하는지 확인\\n- 업로드 결과가 정확히 수집되는지 확인",
      "analysisResult": "성경 자료 다중 파일 업로드 시스템 구현을 위한 TODO 리스트. 기존 FileUpload.tsx 컴포넌트 개선을 우선으로 하고, 파일명 패턴에서 장 번호 자동 추출, 다중 파일 일괄 업로드, 진행률 표시, Supabase DB 구조 개선을 포함한 완전한 시스템 구축. 사용자 경험 향상과 성능 최적화를 목표로 함."
    },
    {
      "id": "ee2bd479-a7fc-434f-86a4-ef6fa707507a",
      "name": "사용자 경험 개선 및 최적화",
      "description": "드래그앤드롭 영역 개선, 파일 선택 안내 메시지 업데이트, 업로드 버튼 상태 관리, 토스트 알림 개선을 통한 사용자 경험을 향상. 직관적인 인터페이스와 즉시 피드백을 제공하는 완성된 다중 파일 업로드 시스템을 구현.",
      "notes": "기존 토스트 시스템 재사용. 업로드 버튼은 모든 파일이 검증을 통과했을 때만 활성화. 파일 선택 즉시 검증 결과를 표시하여 사용자 경험 향상.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "0cc14fa3-d112-4871-9b51-7e5b2e143db8"
        }
      ],
      "createdAt": "2025-07-18T19:09:53.312Z",
      "updatedAt": "2025-07-18T19:09:53.312Z",
      "relatedFiles": [
        {
          "path": "src/components/features/FileUpload.tsx",
          "type": "TO_MODIFY",
          "description": "사용자 경험 개선",
          "lineStart": 180,
          "lineEnd": 238
        }
      ],
      "implementationGuide": "1. 드래그앤드롭 영역 안내 메시지 업데이트\\n2. 업로드 버튼 상태 관리 로직 개선 (검증 실패 파일이 있을 때 비활성화)\\n3. 토스트 알림 메시지 개선 및 상세화\\n4. 파일 선택 시 즉시 피드백 제공\\n5. 업로드 완료 후 상태 초기화 로직 개선\\n6. 반응형 디자인 및 접근성 개선",
      "verificationCriteria": "- 드래그앤드롭 영역의 안내 메시지가 명확한지 확인\\n- 업로드 버튼 상태 관리가 올바르게 동작하는지 확인\\n- 토스트 알림이 적절하고 상세한지 확인\\n- 파일 선택 시 즉시 피드백이 제공되는지 확인\\n- 업로드 완료 후 상태 초기화가 정상 동작하는지 확인",
      "analysisResult": "성경 자료 다중 파일 업로드 시스템 구현을 위한 TODO 리스트. 기존 FileUpload.tsx 컴포넌트 개선을 우선으로 하고, 파일명 패턴에서 장 번호 자동 추출, 다중 파일 일괄 업로드, 진행률 표시, Supabase DB 구조 개선을 포함한 완전한 시스템 구축. 사용자 경험 향상과 성능 최적화를 목표로 함."
    },
    {
      "id": "24f77eb2-0d28-44ca-82b2-d1c0c87fe15d",
      "name": "Supabase DB 구조 개선 - 누락된 컬럼 추가",
      "description": "b_materials 테이블에 누락된 컬럼들을 추가하여 메타데이터를 보강. file_size(BIGINT), mime_type(TEXT), updated_at(TIMESTAMP) 컬럼을 추가하고, 기존 데이터에 대한 기본값을 설정하는 마이그레이션을 수행.",
      "notes": "기존 데이터의 file_size는 0으로, mime_type은 'text/html'로, updated_at은 created_at과 동일하게 설정. 마이그레이션은 롤백 가능하도록 설계.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-07-18T19:09:53.312Z",
      "updatedAt": "2025-07-18T19:09:53.312Z",
      "relatedFiles": [
        {
          "path": "docs/00-PRD_TODO/b-materia_table_column.sql",
          "type": "REFERENCE",
          "description": "현재 테이블 구조 참조",
          "lineStart": 1,
          "lineEnd": 5
        }
      ],
      "implementationGuide": "1. file_size 컬럼 추가 (BIGINT 타입)\\n2. mime_type 컬럼 추가 (TEXT 타입, 기본값 'text/html')\\n3. updated_at 컬럼 추가 (TIMESTAMP WITH TIME ZONE)\\n4. 기존 데이터에 대한 기본값 설정\\n5. 마이그레이션 SQL 스크립트 작성 및 실행\\n6. 컬럼 추가 후 데이터 무결성 검증",
      "verificationCriteria": "- 모든 누락된 컬럼이 정상적으로 추가되었는지 확인\\n- 기존 데이터에 대한 기본값이 올바르게 설정되었는지 확인\\n- 마이그레이션 후 데이터 무결성이 유지되는지 확인\\n- 새로운 컬럼들이 올바른 데이터 타입으로 생성되었는지 확인",
      "analysisResult": "성경 자료 다중 파일 업로드 시스템 구현을 위한 TODO 리스트. 기존 FileUpload.tsx 컴포넌트 개선을 우선으로 하고, 파일명 패턴에서 장 번호 자동 추출, 다중 파일 일괄 업로드, 진행률 표시, Supabase DB 구조 개선을 포함한 완전한 시스템 구축. 사용자 경험 향상과 성능 최적화를 목표로 함."
    },
    {
      "id": "c187c01a-dbe9-4dbd-8b25-9b7a22872a2b",
      "name": "Supabase DB 구조 개선 - 제약조건 및 인덱스 설정",
      "description": "b_materials 테이블에 데이터 무결성을 보장하는 제약조건과 성능 최적화를 위한 인덱스를 추가. 장 번호 범위 검증(1-150), 외래키 제약조건, 검색 성능 향상을 위한 인덱스를 설정.",
      "notes": "제약조건 추가 시 기존 데이터와의 충돌 여부를 먼저 확인. 인덱스는 검색 성능 향상을 위해 복합 인덱스도 고려. 개발 환경에서 충분한 테스트 후 적용.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "24f77eb2-0d28-44ca-82b2-d1c0c87fe15d"
        }
      ],
      "createdAt": "2025-07-18T19:09:53.312Z",
      "updatedAt": "2025-07-18T19:09:53.312Z",
      "relatedFiles": [
        {
          "path": "docs/00-PRD_TODO/b-materia_table_column.sql",
          "type": "REFERENCE",
          "description": "테이블 구조 참조",
          "lineStart": 1,
          "lineEnd": 5
        }
      ],
      "implementationGuide": "1. 장 번호 범위 제약조건 추가 (1-150)\\n2. 성능 최적화 인덱스 생성 (category_id, chapter, file_name, created_at)\\n3. 외래키 제약조건 검증 및 강화\\n4. 인덱스 생성 후 성능 테스트\\n5. 제약조건 위반 시 오류 처리 로직 검증\\n6. 인덱스 사용률 모니터링 설정",
      "verificationCriteria": "- 장 번호 범위 제약조건이 정상 동작하는지 확인\\n- 인덱스가 올바르게 생성되었는지 확인\\n- 검색 성능이 개선되었는지 확인\\n- 제약조건 위반 시 적절한 오류가 발생하는지 확인\\n- 외래키 제약조건이 데이터 무결성을 보장하는지 확인",
      "analysisResult": "성경 자료 다중 파일 업로드 시스템 구현을 위한 TODO 리스트. 기존 FileUpload.tsx 컴포넌트 개선을 우선으로 하고, 파일명 패턴에서 장 번호 자동 추출, 다중 파일 일괄 업로드, 진행률 표시, Supabase DB 구조 개선을 포함한 완전한 시스템 구축. 사용자 경험 향상과 성능 최적화를 목표로 함."
    },
    {
      "id": "4beb15d5-6bcd-419d-939b-47167433c578",
      "name": "Supabase DB 구조 개선 - 자동 업데이트 트리거 구현",
      "description": "b_materials 테이블의 updated_at 컬럼이 자동으로 업데이트되도록 트리거를 구현. 레코드 수정 시 updated_at 컬럼이 현재 시각으로 자동 업데이트되는 기능을 추가하여 데이터 변경 이력을 추적할 수 있도록 함.",
      "notes": "기존 update_updated_at_column 함수가 있다면 재사용, 없다면 새로 생성. 트리거는 BEFORE UPDATE 시점에 동작하도록 설정. 트리거 성능 영향을 최소화하기 위해 최적화.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "c187c01a-dbe9-4dbd-8b25-9b7a22872a2b"
        }
      ],
      "createdAt": "2025-07-18T19:09:53.312Z",
      "updatedAt": "2025-07-18T19:09:53.312Z",
      "relatedFiles": [
        {
          "path": "docs/00-PRD_TODO/b-materia_table_column.sql",
          "type": "REFERENCE",
          "description": "테이블 구조 참조",
          "lineStart": 1,
          "lineEnd": 5
        }
      ],
      "implementationGuide": "1. update_updated_at_column 함수 구현\\n2. b_materials 테이블에 트리거 생성\\n3. 트리거 동작 테스트 (INSERT, UPDATE 시 updated_at 자동 업데이트)\\n4. 트리거 성능 영향 분석\\n5. 트리거 오류 처리 로직 구현\\n6. 트리거 로깅 및 모니터링 설정",
      "verificationCriteria": "- updated_at 컬럼이 레코드 수정 시 자동으로 업데이트되는지 확인\\n- 트리거가 정상적으로 동작하는지 확인\\n- 트리거 성능에 문제가 없는지 확인\\n- 트리거 오류가 적절히 처리되는지 확인\\n- 데이터 변경 이력이 올바르게 추적되는지 확인",
      "analysisResult": "성경 자료 다중 파일 업로드 시스템 구현을 위한 TODO 리스트. 기존 FileUpload.tsx 컴포넌트 개선을 우선으로 하고, 파일명 패턴에서 장 번호 자동 추출, 다중 파일 일괄 업로드, 진행률 표시, Supabase DB 구조 개선을 포함한 완전한 시스템 구축. 사용자 경험 향상과 성능 최적화를 목표로 함."
    },
    {
      "id": "d8ce89ab-85fa-43f5-840b-4b460f9af035",
      "name": "기존 데이터 마이그레이션 및 검증",
      "description": "새로 추가된 컬럼들에 대한 기존 데이터 마이그레이션을 수행하고, 전체 시스템의 데이터 무결성을 검증. 기존 업로드된 파일들의 메타데이터를 보강하고, 새로운 구조와의 호환성을 확인.",
      "notes": "마이그레이션 전 전체 데이터 백업 필수. 기존 파일의 file_size는 Storage에서 실제 크기를 조회하여 설정. 마이그레이션 중 오류 발생 시 롤백 가능하도록 설계.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "4beb15d5-6bcd-419d-939b-47167433c578"
        }
      ],
      "createdAt": "2025-07-18T19:09:53.312Z",
      "updatedAt": "2025-07-18T19:09:53.312Z",
      "relatedFiles": [
        {
          "path": "src/components/features/FileUpload.tsx",
          "type": "REFERENCE",
          "description": "기존 업로드 로직 참조",
          "lineStart": 147,
          "lineEnd": 155
        }
      ],
      "implementationGuide": "1. 기존 b_materials 데이터 분석 및 검증\\n2. 누락된 메타데이터 보강 (file_size, mime_type 등)\\n3. 데이터 무결성 검증 스크립트 작성 및 실행\\n4. 기존 파일과 Storage 경로 매핑 검증\\n5. 마이그레이션 결과 보고서 생성\\n6. 롤백 계획 수립 및 테스트",
      "verificationCriteria": "- 모든 기존 데이터가 새로운 구조와 호환되는지 확인\\n- 누락된 메타데이터가 올바르게 보강되었는지 확인\\n- 데이터 무결성이 유지되는지 확인\\n- Storage 파일과 DB 메타데이터가 일치하는지 확인\\n- 마이그레이션 후 기존 기능이 정상 동작하는지 확인",
      "analysisResult": "성경 자료 다중 파일 업로드 시스템 구현을 위한 TODO 리스트. 기존 FileUpload.tsx 컴포넌트 개선을 우선으로 하고, 파일명 패턴에서 장 번호 자동 추출, 다중 파일 일괄 업로드, 진행률 표시, Supabase DB 구조 개선을 포함한 완전한 시스템 구축. 사용자 경험 향상과 성능 최적화를 목표로 함."
    }
  ]
}